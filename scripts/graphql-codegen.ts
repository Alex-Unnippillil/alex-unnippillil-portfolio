import { promises as fs } from 'fs';
import path from 'path';
import crypto from 'crypto';

async function main() {
  const queriesDir = path.resolve(__dirname, '../src/graphql/queries');
  const outTypes = path.resolve(__dirname, '../src/graphql/types.d.ts');
  const outOperations = path.resolve(__dirname, '../src/graphql/operations.ts');

  const files = await fs.readdir(queriesDir);
  const operations: Record<string, string> = {};
  const typeLines: string[] = [
    '/**',
    ' * This file is auto-generated by graphql-codegen.',
    ' * Do not edit this file directly.',
    ' */',
    '',
  ];

  for (const file of files) {
    if (!file.endsWith('.graphql')) continue;
    const filePath = path.join(queriesDir, file);
    const query = await fs.readFile(filePath, 'utf8');
    const hash = crypto.createHash('sha256').update(query).digest('hex');
    operations[hash] = query;
    const typeName = path.basename(file, '.graphql');
    typeLines.push(`/** @typedef {{ hash: string, query: string }} ${typeName}Operation */`);
    typeLines.push('');
  }

  typeLines.push('export {};');
  typeLines.push('');

  await fs.writeFile(outTypes, typeLines.join('\n'));
  await fs.writeFile(
    outOperations,
    `// This file is auto-generated by graphql-codegen.\n` +
      `export const operations = ${JSON.stringify(operations, null, 2)} as const;\n`
  );
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
